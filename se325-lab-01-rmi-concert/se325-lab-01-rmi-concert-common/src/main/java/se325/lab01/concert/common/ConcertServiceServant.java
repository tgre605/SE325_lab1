
public class ConcertServiceServant extends UnicastRemoteObject implements ConcertService {
	List<Convert> ConcertList
	public ConcertServiceServant() throws RemoteException{
		
	}
	/**
     * Creates and stores a new Concert.
     *
     * @param concert the new Concert to create. The concert's fields should be
     *                filled in except for the id field, whose value is generated by the service.
     * @return a copy of the new Concert, with its id field populated.
     * @throws RemoteException
     */
	@Override
    public Concert createConcert(Concert concert) throws RemoteException{
		ConcertList.add(concert);
		int id = ConcertList.indexOf(concert)
	}
		
    /**
     * Retrieves a Concert based on a specified id.
     *
     * @param id the id of the requested Concert.
     * @return The matching Concert object, or null if there is no match.
     * @throws RemoteException
     */
	@Override
    public Concert getConcert(Long id) throws RemoteException{
		
	}

    /**
     * Updates an existing Concert.
     *
     * @param concert the Concert to update.
     * @return true if the Concert exists, false otherwise. Where false is
     * returned the state of the service is not changed (i.e. the Concert isn't
     * stored).
     * @throws RemoteException
     */
	@Override
    public boolean updateConcert(Concert concert) throws RemoteException{
		
	}

    /**
     * Deletes a Concert with a specified id.
     *
     * @param id the unique id of the Concert to delete.
     * @return true if the Concert is found and deleted, false otherwise.
     * @throws RemoteException
     */
	@Override
    public boolean deleteConcert(Long id) throws RemoteException{
		
	}

    /**
     * Returns all Concerts known to the service.
     *
     * @return A List of Concerts.
     * @throws RemoteException
     */
	@Override
    public List<Concert> getAllConcerts() throws RemoteException{
		
	}

    /**
     * removes all Concerts stored b the service.
     *
     * @throws RemoteException
     */
	@Override
    void clear() throws RemoteException{
		
	}
}
