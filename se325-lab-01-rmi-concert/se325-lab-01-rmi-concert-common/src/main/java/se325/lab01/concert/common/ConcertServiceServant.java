package se325.lab01.concert.common;

import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;
import java.util.List;

public class ConcertServiceServant extends UnicastRemoteObject implements ConcertService {
	List<Concert> ConcertList;

	public ConcertServiceServant() throws RemoteException {
		
	}
	/**
     * Creates and stores a new Concert.
     *
     * @param concert the new Concert to create. The concert's fields should be
     *                filled in except for the id field, whose value is generated by the service.
     * @throws RemoteException
     */
	@Override
    public Concert createConcert(Concert concert) throws RemoteException{
		if(ConcertList.contains(concert)){
			return concert;
		} else {
			ConcertList.add(concert);
			concert.setId(ConcertList.indexOf(concert));
		}
		return concert;

	}
		
    /**
     * Retrieves a Concert based on a specified id.
     *
     * @param id the id of the requested Concert.
     * @return The matching Concert object, or null if there is no match.
     * @throws RemoteException
     */
	@Override
    public Concert getConcert(Long id) throws RemoteException{
		Concert temp = ConcertList.get(id.intValue());
		if(temp != null){
			return temp;
		} else {
			return null;
		}
	}

    /**
     * Updates an existing Concert.
     *
     * @param concert the Concert to update.
     * @return true if the Concert exists, false otherwise. Where false is
     * returned the state of the service is not changed (i.e. the Concert isn't
     * stored).
     * @throws RemoteException
     */
	@Override
    public boolean updateConcert(Concert concert) throws RemoteException{
		if (ConcertList.contains(concert)){
			return true;
		} else {
			return false;
		}
	}

    /**
     * Deletes a Concert with a specified id.
     *
     * @param id the unique id of the Concert to delete.
     * @return true if the Concert is found and deleted, false otherwise.
     * @throws RemoteException
     */
	@Override
    public boolean deleteConcert(Long id) throws RemoteException{
		if (getConcert(id) != null) {
			ConcertList.remove(id);
			return true;
		} else {
			return false;
		}
	}

    /**
     * Returns all Concerts known to the service.
     *
     * @return A List of Concerts.
     * @throws RemoteException
     */
	@Override
    public List<Concert> getAllConcerts() throws RemoteException{
		return ConcertList;
	}

    /**
     * removes all Concerts stored b the service.
     *
     * @throws RemoteException
     */
	@Override
	public void clear() throws RemoteException{
		ConcertList.clear();
	}
}
